TCGAbiolinks::getProjectSummary("TCGA-COAD")
query_TCGA = GDCquery(
  project = "TCGA-COAD",
  data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
  experimental.strategy = "RNA-Seq",
  data.type = "Gene Expression Quantification",
  workflow.type = "STAR - Counts")

query_TCGA_COAD <- GDCdownload(query = query_TCGA)
geneExp <- SummarizedExperiment::assay(dat)
results = TCGAbiolinks::getResults(query_TCGA)
dat <- GDCprepare(query = query_TCGA, save = TRUE, save.filename = "exp.rda")


adjustedResults <- inner_join(results, Untitled_spreadsheet_clinicalCOAD1, 
                              by = c("cases.submitter_id" = "case_submitter_id"))

stage <- adjustedResults$ajcc_pathologic_stage
sampleType <- adjustedResults$sample_type


caseI <- vector(mode="character")
caseII <- vector(mode = "character")
caseIIA <- vector(mode = "character")
caseIIB <- vector(mode = "character")
caseIII <- vector(mode = "character")
caseIIIA <- vector(mode = "character")
caseIIIB <- vector(mode = "character")
caseIIIC <- vector(mode = "character")
caseIV <- vector(mode = "character")
caseIVA <- vector(mode = "character")
normal <- vector(mode = "character")

caseList <- adjustedResults$cases

for(i in 1:length(stage)){
  if((stage[i] == "Stage I") && (sampleType[i] == "Primary Tumor")) {
    caseI <- c(caseI,caseList[i])
  }
  else if(stage[i] == "Stage II" && (sampleType[i] == "Primary Tumor")) {
    caseII <- c(caseII,caseList[i])
  }
  else if(stage[i] == "Stage IIA" && (sampleType[i] == "Primary Tumor")) {
    caseIIA <- c(caseIIA,caseList[i])
  }
  else if(stage[i] == "Stage IIB" && (sampleType[i] == "Primary Tumor")) {
    caseIIB <- c(caseIIB,caseList[i])
  }
  else if(stage[i] == "Stage III" && (sampleType[i] == "Primary Tumor")) {
    caseIII <- c(caseIII,caseList[i])
  }
  else if(stage[i] == "Stage IIIA" && (sampleType[i] == "Primary Tumor")) {
    caseIIIA <- c(caseIIIA,caseList[i])
  }
  else if(stage[i] == "Stage IIIB" && (sampleType[i] == "Primary Tumor")) {
    caseIIIB <- c(caseIIIB,caseList[i])
  }
  else if(stage[i] == "Stage IIIC" && (sampleType[i] == "Primary Tumor")) {
    caseIIIC <- c(caseIIIC,caseList[i])
  }
  else if(stage[i] == "Stage IV" && (sampleType[i] == "Primary Tumor")) {
    caseIV <- c(caseIV,caseList[i])
  }
  else if(stage[i] == "Stage IVA" && (sampleType[i] == "Primary Tumor")) {
    caseIVA <- c(caseIII,caseList[i])
  }
  else if(sampleType[i] == "Solid Tissue Normal"){
    normal <-c(normal,caseList[i])
  }
}

caseI <- unique(caseI)
caseII <- unique(caseII)
caseIIA <- unique(caseIIA)
caseIIB <- unique(caseIIB)
caseIII <- unique(caseIII)
caseIIIA <- unique(caseIIIA)
caseIIIB <- unique(caseIIIB)
caseIIIC <- unique(caseIIIC)
caseIV <- unique(caseIV)
caseIVA <- unique(caseIVA)
normal <- unique(normal)



vector_list <- list(
  caseI,
  caseII,
  caseIIA,
  caseIII,
  caseIIIA,
  caseIIIB,
  caseIIIC,
  caseIV,
  caseIVA,
  normal
)

other_vectors <- vector_list[-length(vector_list)] 

all_other_names <- unlist(other_vectors)
names_count <- intersect(normal, all_other_names)

filtered_last_vector <- setdiff(normal, names_count)
filtered_other_vectors <- lapply(other_vectors, function(vec) {
  setdiff(vec, name_count)
})
vector_list <- c(filtered_other_vectors, list(filtered_last_vector))








allCases <- c(normal,caseI,caseII,caseIIA,caseIIB,caseIII,caseIIIA,caseIIIB,caseIIIC,caseIV,caseIVA)
caseIndexesList <- c(41, 80, 30, 144, 12, 20, 8, 60, 45, 48, 20)
count <- 1
h2afydeSeqList <- c()
h2afzdeseqlist <- c()
h2afypvalue <- c()
h2afzpvalue <- c()

deseqList <- c()
pvaluelist <- c()

startIndex <- 1

set1<- 1
set2<- 41

tumor1 <- allCases[set1:set2]

startIndex2 <- 1
endIndex2<- 1

for(i in 1:length(allCases)){
  tumor1 <- allCases[1:41]
  if(i>1){
    min_length <- min(caseIndexesList[count], caseIndexesList[count+1])
    startIndex2 <- caseIndexesList[count]+1
    endIndex2 <- caseIndexesList[count]+caseIndexesList[count+1]
    if(caseIndexesList[count+1] < 41){
      random_strings <- sample(allCases[startIndex2:endIndex2], size = min_length, replace = TRUE)
      print(random_strings)
    }
    else{
      random_strings <- sample(allCases[1:41], size = min_length, replace = TRUE)
    }
  }
  tumor2 <- random_strings
  deseqValue <- runningDeseq2(tumor1,tumor2)
  
  deseqList <- c(deseqList,deseqValue$logFold)
  pvaluelist <- c(pvaluelist,deseqValue$pValue)
  
  count <- count +1
}


split_even_odd <- function(input_list) {
  even_indices <- seq(2, length(input_list), by = 2)  # indices 2, 4, 6, ...
  odd_indices <- seq(1, length(input_list), by = 2)   # indices 1, 3, 5, ...
  
  even_list <- input_list[even_indices]
  odd_list <- input_list[odd_indices]
  
  return(list(even = even_list, odd = odd_list))
}

resultDeSeq <- split_even_odd(deseqList)
h2afydeSeqList <- resultDeSeq$odd
h2afzdeseqlist <- resultDeSeq$even

resultPvalue <- split_even_odd(pvaluelist)
h2afypvalue <- resultPvalue$odd
h2afzpvalue <- resultPvalue$even

geneExpNames <- row.names(geneExp)
is_in_list <- "ENSMUSG00000000031.19" %in% geneExpNames


runningDeseq2 <- function(tumor1, tumor2){
  tumor1 <- unique(tumor1)
  tumor2 <- unique(tumor2)
  
  min_length <- min(length(tumor1), length(tumor2))
  tumor1 <- tumor1[1:min_length]
  tumor2 <- tumor2[1:min_length]
  
  # Find shared strings between the two vectors
  shared_strings <- intersect(tumor1, tumor2)
  
  # Append "Tumor" to shared strings only in the second vector
  tumor2 <- ifelse(tumor2 %in% shared_strings, paste0(tumor2, "Tumor"), tumor2)
  
  print(tumor1)
  print(tumor2)
 
  
  #tumor vs normal
  tumor<-geneExp[ , grepl( ".............01............." , colnames( geneExp ) ) ]
  dim(tumor)
  normal<-geneExp[ , grepl( ".............11............." , colnames( geneExp ) ) ]
  dim(normal)
  
  cnts <- data.frame(tumor,normal) 
  
  #filtering datasets
  row_names_to_keep = c("ENSG00000099284.15", "ENSG00000164032.12")
  
  filtered_cnts <- subset(cnts, row.names(cnts) %in% row_names_to_keep)
  
  #case comparison
  l <- list(data.frame(geneExp))
  list1<-c()
  for(i in 1:length(tumor1)){
    list1 <- c(list1, c(tumor1[i],tumor2[i]))
  }
  
  list1 <- gsub("-",".",list1)
  
  dta_list1 <- lapply(l, function(x) x%>% select(all_of(list1)))
  
  #matrix count_data
  
  dta <- data.frame(dta_list1)
  dta_list <- subset(dta, row.names(dta) %in% row_names_to_keep)
  
  cnts_noZero <- dta_list[rowMeans(dta_list) > 0,]
  dim(cnts_noZero)
  
  #matrix coldata
  stageString <- c()
  for(i in 1:length(tumor1)){
    stageString <- c(stageString, c("Normal", "Tumor"))
  }
  colData <- data.frame(Stage = stageString)
  rownames(colData) <- list1
  
  print(colData)
  
  rownames(colData) <- gsub("-",".",rownames(colData))
  
  #coldat=DataFrame(conds=factor(conds))
  #all(colnames(dta_list) %in% rownames(colData))
  
  dds <- DESeqDataSetFromMatrix(dta_list, 
                                colData=colData, 
                                design = ~ Stage)
  
  dds$Stage <- relevel(dds$Stage, ref = "Normal")
  
  
  
  dds <- DESeq(dds, fitType = "mean")
  res <- results(dds)
  
  res <- data.frame(res)
  print(res)
  return(list(logFold = res$log2FoldChange,pValue = res$pvalue))
  
}


df <- data.frame(
  Stage = c("N-I", "I-II","II-IIA","IIA-IIB","IIB-III","III-IIIA", "IIIA-IIIB", 
            "IIIB-IIIC","IIIC-IV","IV-IVA"),
  logFC_Gene1 = h2afydeSeqList,
  logFC_Gene2 = h2afzdeseqlist,
  pvalue_Gene1 = h2afypvalue,
  pvalue_Gene2 = h2afzpvalue
)

# Creating the PA plot
ggplot(df, aes(x = logFC_Gene1, y = logFC_Gene2)) +
  geom_point(aes(size = -log10(pvalue_Gene1), color = -log10(pvalue_Gene2)), alpha = 0.7) +
  scale_color_gradient(low = "blue", high = "red") +
  theme_minimal() +
  labs(title = "PA Plot of Two Genes",
       x = "Log2 Fold Change (Gene 1)",
       y = "Log2 Fold Change (Gene 2)",
       size = "-Log10 P-value (Gene 1)",
       color = "-Log10 P-value (Gene 2)") +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black")


logList <- c(h2afydeSeqList,h2afzdeseqlist)

dfVolcano <- data.frame(
  gene = c("H2AFY2", "H2AFZ"),
  logFC = logList,
  pvalue = c(h2afypvalue,h2afzpvalue)
)

ggplot(dfVolcano, aes(x = logFC, y = -log10(pvalue))) +
  geom_point(aes(color = pvalue < 0.05), alpha = 0.6) +
  scale_color_manual(values = c("black", "red")) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +  
  labs(title = "LogFold Expression of H2AFY2 and H2AFZ in CRC",
       x = "Log2 Fold Change",
       y = "-Log10 P-value") +
  theme_minimal()



dfVolcano1 <- data.frame(
  gene = c("H2AFY2"),
  logFC = h2afydeSeqList,
  pvalue = c(h2afypvalue),
  Stage = c("N-I", "I-II","II-IIA","IIA-IIB","IIB-III","III-IIIA", "IIIA-IIIB", 
            "IIIB-IIIC","IIIC-IV","IV-IVA")
)
dfVolcano2 <- data.frame(
  gene = c("H2AZ1"),
  logFC = h2afzdeseqlist,
  pvalue = c(h2afzpvalue),
  Stage = c("N-I", "I-II","II-IIA","IIA-IIB","IIB-III","III-IIIA", "IIIA-IIIB", 
            "IIIB-IIIC","IIIC-IV","IV-IVA")
)

combinedData <- rbind(dfVolcano1,dfVolcano2)

duplicate_strings <- function(string) {
  # Create a new string where the original string is duplicated
  return(paste(rep(string, 2), collapse = " "))
}

exportData <- write.csv(combinedData, "/Users/raghav/Downloads/PolygenceGraphs/LogDataTable.csv")


**********
  
  for(i in 1:length(allCases)){
    if(i > 1){
      diffLengths <- caseIndexesList[1] - caseIndexesList[count]
      if(diffLengths < 0) {
        diffLengths <- abs(diffLengths)
        startIndex <- startIndex + caseIndexesList[count-1]
        endIndex <- startIndex+caseIndexesList[count]-1-diffLengths
      }
      else{
        diffLengths <- abs(diffLengths)
        startIndex <- startIndex + caseIndexesList[count-1]
        endIndex <- startIndex+caseIndexesList[count]-1
        tumor1 <- tumor1[1:(41-diffLengths)]
      }
      tumor2 <- allCases[startIndex:endIndex]
      print("Check")
      deseqValue <- runningDeseq2(tumor1,tumor2)
      
      deseqList <- c(deseqList,deseqValue$logFold)
      pvaluelist <- c(pvaluelist,deseqValue$pValue)
    }
    count <- count +1
    tumor1 <- allCases[1:41]
  }


